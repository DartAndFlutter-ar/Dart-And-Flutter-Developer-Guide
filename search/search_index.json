{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dart and Flutter Developer Guide","text":"<p>Dart and Flutter Developer Guide</p>"},{"location":"dart/caracteristicas/","title":"Caracter\u00edsticas Dart","text":"<p>Las caracter\u00edsticas principales de Dart incluyen:</p> <ul> <li> <p>Tipado opcional: Dart es un lenguaje tipado opcional, lo que significa que los desarrolladores pueden optar por especificar el tipo de una variable o dejar que el sistema de inferencia de tipos determine el tipo de la variable autom\u00e1ticamente.</p> </li> <li> <p>Orientado a objetos: Dart es un lenguaje orientado a objetos, lo que significa que todo en Dart es un objeto. Esto permite a los desarrolladores utilizar conceptos de programaci\u00f3n orientada a objetos, como clases, herencia y encapsulaci\u00f3n.</p> </li> <li> <p>Funciones de orden superior: Dart admite funciones de orden superior, lo que significa que las funciones pueden tomar otras funciones como par\u00e1metros y devolver funciones como resultados.</p> </li> <li> <p>Colecciones: Dart admite colecciones como listas, mapas y conjuntos, lo que permite a los desarrolladores manipular datos de manera f\u00e1cil y eficiente.</p> </li> <li> <p>Asincron\u00eda: Dart admite la programaci\u00f3n as\u00edncrona, lo que permite a los desarrolladores escribir c\u00f3digo que no bloquea la ejecuci\u00f3n de otras tareas. Esto es especialmente \u00fatil en aplicaciones que requieren acceso a la red o a la base de datos.</p> </li> <li> <p>Interoperabilidad con JavaScript: Dart se puede compilar en JavaScript, lo que significa que los desarrolladores pueden utilizar el mismo c\u00f3digo Dart tanto en el lado del cliente como en el lado del servidor.</p> </li> <li> <p>Herramientas de desarrollo: Dart viene con un conjunto de herramientas de desarrollo, incluyendo un compilador, un depurador y un editor de c\u00f3digo. Estas herramientas permiten a los desarrolladores escribir y depurar c\u00f3digo de manera eficiente.</p> </li> </ul> <p>Resumiendo</p> <p>Dart es un lenguaje de programaci\u00f3n moderno y vers\u00e1til que admite una amplia gama de caracter\u00edsticas, incluyendo tipado opcional, programaci\u00f3n orientada a objetos, funciones de orden superior, colecciones, asincron\u00eda e Interoperabilidad con JavaScript, lo que lo hace una excelente opci\u00f3n para el desarrollo de aplicaciones web y m\u00f3viles.</p>"},{"location":"dart/dartpad/","title":"Dartpad","text":"<p>DartPad es un editor de c\u00f3digo en l\u00ednea gratuito para el lenguaje de programaci\u00f3n Dart. Es una herramienta muy \u00fatil para los desarrolladores que desean probar el lenguaje y experimentar con diferentes caracter\u00edsticas sin tener que instalar un entorno de desarrollo completo en su ordenador.</p> <p>DartPad funciona directamente desde un navegador web y permite escribir, probar y compartir c\u00f3digo Dart de forma r\u00e1pida y sencilla. Ofrece un entorno de edici\u00f3n de c\u00f3digo con funciones de resaltado de sintaxis y sugerencias de c\u00f3digo, lo que facilita la escritura de c\u00f3digo.</p> <p>Adem\u00e1s, DartPad proporciona una consola de salida en tiempo real, que permite a los desarrolladores ver los resultados de su c\u00f3digo a medida que lo escriben. Tambi\u00e9n incluye una serie de ejemplos y plantillas de c\u00f3digo para ayudar a los desarrolladores a empezar.</p> <p>Una de las caracter\u00edsticas m\u00e1s \u00fatiles de DartPad es que permite compartir el c\u00f3digo que se est\u00e1 escribiendo con otros desarrolladores. El c\u00f3digo se puede compartir mediante un enlace generado autom\u00e1ticamente o mediante la creaci\u00f3n de un archivo de gist de GitHub.</p> <p>DartPad es una herramienta en l\u00ednea gratuita que permite a los desarrolladores escribir, probar y compartir c\u00f3digo Dart de forma r\u00e1pida y sencilla, sin tener que instalar un entorno de desarrollo completo. Es una herramienta muy \u00fatil para experimentar con el lenguaje de programaci\u00f3n Dart y aprender sus caracter\u00edsticas principales.</p> <p>Abrir DartPad</p> <p>Resumiendo</p> <p>DartPad es una herramienta en l\u00ednea gratuita que permite a los desarrolladores escribir, probar y compartir c\u00f3digo Dart de forma r\u00e1pida y sencilla, sin tener que instalar un entorno de desarrollo completo. Es una herramienta muy \u00fatil para experimentar con el lenguaje de programaci\u00f3n Dart y aprender sus caracter\u00edsticas principales.</p>"},{"location":"dart/ejecucion_compilacion/","title":"Tiempo de Ejecuci\u00f3n Vs Tiempo de Compilaci\u00f3n","text":"<p>En el proceso de desarrollo de software, el c\u00f3digo se ejecuta en dos fases principales: la fase de compilaci\u00f3n y la fase de ejecuci\u00f3n.</p> <p>En Dart, el tiempo de compilaci\u00f3n se refiere al proceso de convertir el c\u00f3digo fuente escrito en un archivo .dart en un archivo ejecutable. Durante la compilaci\u00f3n, el compilador de Dart realiza una serie de tareas, como verificar la sintaxis del c\u00f3digo, verificar los tipos de variables y funciones, generar c\u00f3digo de m\u00e1quina y optimizar el c\u00f3digo para mejorar el rendimiento. El resultado de la compilaci\u00f3n es un archivo ejecutable que se puede ejecutar en una m\u00e1quina espec\u00edfica.</p> <p>Por otro lado, el tiempo de ejecuci\u00f3n se refiere al momento en que se ejecuta el c\u00f3digo en la m\u00e1quina destino. Durante la ejecuci\u00f3n, el sistema operativo carga el archivo ejecutable en la memoria, y el procesador ejecuta las instrucciones contenidas en el archivo. Durante la ejecuci\u00f3n, el c\u00f3digo se comunica con el sistema operativo y con otros programas que se est\u00e1n ejecutando en la m\u00e1quina.</p> <p>Es importante destacar que Dart es un lenguaje de programaci\u00f3n con tipado est\u00e1tico, lo que significa que el compilador de Dart verifica los tipos de variables y funciones durante la compilaci\u00f3n, y puede detectar errores de tipo antes de que se ejecute el c\u00f3digo. Esto puede ayudar a prevenir errores y mejorar la calidad del c\u00f3digo. Adem\u00e1s, el compilador de Dart tambi\u00e9n puede optimizar el c\u00f3digo para mejorar el rendimiento en tiempo de ejecuci\u00f3n.</p> <p>Resumiendo</p> <p>El tiempo de compilaci\u00f3n en Dart se refiere al proceso de generar un archivo ejecutable a partir del c\u00f3digo fuente, mientras que el tiempo de ejecuci\u00f3n se refiere al momento en que se ejecuta el c\u00f3digo en una m\u00e1quina espec\u00edfica. El uso del tipado est\u00e1tico en Dart permite que el compilador detecte errores de tipo durante la compilaci\u00f3n, lo que puede mejorar la calidad del c\u00f3digo y evitar errores en tiempo de ejecuci\u00f3n.</p>"},{"location":"dart/main/","title":"Hola Mundo (La funci\u00f3n main())","text":"<p>Este es un programa muy simple que simplemente imprime \"\u00a1Hola Mundo!\" en la consola.</p> <pre><code>void main() {\nprint(\"\u00a1Hola Mundo!\");\n}\n</code></pre> <p>Abrir en DartPad</p> <p>El programa consta de dos partes principales:</p> <ol> <li> <p>La funci\u00f3n main(): Esta es la funci\u00f3n principal del programa y es el punto de entrada para la ejecuci\u00f3n del programa. En este caso, la funci\u00f3n no recibe ning\u00fan argumento y no devuelve ning\u00fan valor, por lo que su tipo de retorno se establece como <code>void</code>.</p> </li> <li> <p>La funci\u00f3n print(): Esta es una funci\u00f3n incorporada en Dart que se utiliza para imprimir texto en la consola. En este caso, se utiliza para imprimir el mensaje \"\u00a1Hola Mundo!\" en la consola.</p> </li> </ol> <p>Para ejecutar este programa, se puede utilizar el compilador de Dart y luego ejecutar el archivo generado. Tambi\u00e9n hay entornos de desarrollo integrados para Dart, como DartPad o Visual Studio Code, que permiten la ejecuci\u00f3n del programa de manera m\u00e1s sencilla.</p> <p>Resumiendo</p> <p>El programa \"Hola Mundo\" en Dart es un ejemplo simple de c\u00f3mo se escribe un programa b\u00e1sico en este lenguaje de programaci\u00f3n, utilizando una funci\u00f3n principal y una funci\u00f3n incorporada para imprimir un mensaje en la consola.</p>"},{"location":"dart/que_es_dart/","title":"Que es Dart?","text":"<p>Dart es un lenguaje de programaci\u00f3n de alto nivel desarrollado por Google en 2011. Es un lenguaje de programaci\u00f3n orientado a objetos y est\u00e1 dise\u00f1ado para ser utilizado tanto en la creaci\u00f3n de aplicaciones web como de aplicaciones m\u00f3viles.</p> <p>Dart cuenta con una sintaxis sencilla y moderna, con caracter\u00edsticas que permiten el desarrollo de aplicaciones de forma r\u00e1pida y eficiente. Adem\u00e1s, cuenta con una herramienta de compilaci\u00f3n que permite la conversi\u00f3n de c\u00f3digo Dart a JavaScript, lo que lo hace ideal para el desarrollo de aplicaciones web.</p> <p>Dart tambi\u00e9n cuenta con una amplia biblioteca est\u00e1ndar, lo que significa que los desarrolladores pueden aprovechar una gran cantidad de funcionalidades y herramientas integradas para facilitar el desarrollo de sus aplicaciones.</p> <p>Es importante mencionar que Dart es el lenguaje de programaci\u00f3n que utiliza Flutter, un framework de desarrollo de aplicaciones m\u00f3viles multiplataforma tambi\u00e9n creado por Google.</p> <p>Flutter utiliza Dart como su lenguaje de programaci\u00f3n principal, lo que permite a los desarrolladores crear aplicaciones m\u00f3viles con una interfaz de usuario atractiva y altamente personalizable. La combinaci\u00f3n de Dart y Flutter permite la creaci\u00f3n de aplicaciones r\u00e1pidas, eficientes y con un alto rendimiento, lo que las convierte en una opci\u00f3n popular entre los desarrolladores de aplicaciones m\u00f3viles.</p> <p>Resumiendo</p> <p>Dart es un lenguaje de programaci\u00f3n moderno y vers\u00e1til que se puede utilizar para el desarrollo de una amplia gama de aplicaciones.</p> <p>Info</p> <p>https://dart.dev/</p>"},{"location":"dart/tipo_dynamic/","title":"Variable Tipo Dynamic","text":"<p>En Dart, <code>dynamic</code> es un tipo de variable especial que permite la asignaci\u00f3n de cualquier tipo de valor en tiempo de ejecuci\u00f3n.</p> <p>Las variables declaradas como <code>dynamic</code> no se comprueban en tiempo de compilaci\u00f3n para verificar que sean del tipo correcto. En lugar de eso, se permiten todas las operaciones en las variables <code>dynamic</code> y se comprueba su tipo en tiempo de ejecuci\u00f3n.</p> <p>Algunos de los casos de uso comunes de <code>dynamic</code> son:</p> <ul> <li>Cuando se trabaja con una API externa que puede devolver diferentes tipos de datos seg\u00fan el contexto.</li> <li>Cuando se trabaja con datos que pueden cambiar su tipo de manera din\u00e1mica, como en el ejemplo del c\u00f3digo anterior.</li> <li>Cuando se necesita almacenar objetos de diferentes tipos en una lista o mapa.</li> </ul> <p>Sin embargo, el uso excesivo de <code>dynamic</code> puede dificultar la comprensi\u00f3n del c\u00f3digo y aumentar la posibilidad de errores en tiempo de ejecuci\u00f3n. Adem\u00e1s, las variables <code>dynamic</code> no tienen los beneficios de comprobaci\u00f3n de tipo que proporcionan los otros tipos de variables en Dart, lo que puede hacer que el c\u00f3digo sea m\u00e1s dif\u00edcil de mantener y depurar.</p> <p>Tip</p> <p>En general, se recomienda evitar el uso excesivo de <code>dynamic</code> y utilizar los tipos de datos est\u00e1ticos siempre que sea posible para beneficiarse de la comprobaci\u00f3n de tipos en tiempo de compilaci\u00f3n.</p> <p>Un ejemplo com\u00fan de error que puede ocurrir debido al uso indebido de <code>dynamic</code> es la invocaci\u00f3n de un m\u00e9todo que no existe en tiempo de ejecuci\u00f3n.</p> <p>Por ejemplo, considera el siguiente c\u00f3digo:</p> <pre><code>void main() {\ndynamic value = 'Hola mundo';\nvalue.toUpperCase(); // (1)\n}\n</code></pre> <ol> <li><code>toUpperCase</code> es un m\u00e9todo que devuelve un <code>string</code> en may\u00fasculas.</li> </ol> <p>En este ejemplo, la variable value se declara como <code>dynamic</code> y se le asigna una cadena de caracteres \"Hola mundo\". Luego, se llama al m\u00e9todo <code>toUpperCase()</code> en la variable <code>value</code>.</p> <p>El problema aqu\u00ed es que, como la variable value se declara como <code>dynamic</code>, Dart no verifica en tiempo de compilaci\u00f3n si el m\u00e9todo <code>toUpperCase()</code> existe en el objeto al que se hace referencia. En este caso, como el objeto es una cadena de caracteres, el m\u00e9todo <code>toUpperCase()</code> s\u00ed existe y el programa se ejecutar\u00e1 sin problemas.</p> <p>Sin embargo, si cambiamos el valor de la variable value a un tipo de objeto diferente que no tenga un m\u00e9todo <code>toUpperCase()</code>, el programa fallar\u00e1 en tiempo de ejecuci\u00f3n. Por ejemplo:</p> <pre><code>void main() {\ndynamic value = 123;\nvalue.toUpperCase();\n}\n// Como notaras Dart no nos brinda ning\u00fan error. \n// Sin embargo si corremos el c\u00f3digo el programa crasheara. \n// Y si cambiamos el tipo de dato de la variable `value`\n// Por un entero Dart nos advertir\u00e1 del error. \n</code></pre> <p>Abrir en DartPad</p> <p>En este caso, la variable <code>value</code> se le asigna un valor entero en lugar de una cadena de caracteres. Como los enteros no tienen un m\u00e9todo <code>toUpperCase()</code>, el programa arrojar\u00e1 un error en tiempo de ejecuci\u00f3n que indicar\u00e1 que el m\u00e9todo no existe.</p> <p>El uso indebido de dynamic puede hacer que el c\u00f3digo sea m\u00e1s dif\u00edcil de entender y mantener, y puede provocar errores en tiempo de ejecuci\u00f3n. Por lo tanto, se recomienda utilizar <code>dynamic</code> solo cuando sea necesario y siempre que sea posible utilizar tipos est\u00e1ticos para beneficiarse de la comprobaci\u00f3n de tipos en tiempo de compilaci\u00f3n.</p> <p>Resumiendo</p> <p>El uso indebido de dynamic puede hacer que el c\u00f3digo sea m\u00e1s dif\u00edcil de entender y mantener, y puede provocar errores en tiempo de ejecuci\u00f3n. Por lo tanto, se recomienda utilizar dynamic solo cuando sea necesario y siempre que sea posible utilizar tipos est\u00e1ticos para beneficiarse de la comprobaci\u00f3n de tipos en tiempo de compilaci\u00f3n.</p>"},{"location":"dart/tipo_list/","title":"Tipo List","text":"<p>En Dart, una Li``st es una colecci\u00f3n ordenada de objetos que puede contener cero o m\u00e1s elementos. Cada elemento en la lista se identifica por un \u00edndice entero que comienza en cero para el primer elemento y se incrementa en uno para cada elemento subsiguiente.</p> <p>La sintaxis b\u00e1sica para crear una lista es la siguiente:</p> <pre><code>List&lt;int&gt; numeros = [1, 2, 3, 4, 5];\n</code></pre> <p>En este ejemplo, se crea una lista llamada <code>n\u00fameros</code> que contiene cinco enteros. La sintaxis utiliza corchetes [] para indicar que se trata de una lista y se separan los elementos por comas.</p>"},{"location":"dart/tipo_list/#metodos-utiles","title":"M\u00e9todos \u00datiles","text":"<p>Entre las principales caracter\u00edsticas de las listas en Dart se incluyen:</p> <ul> <li>add(E elemento): Agrega el elemento especificado al final de la lista.</li> <li>addAll(Iterable elementos): Agrega todos los elementos especificados al final de la lista. <li>insert(int indice, E elemento): Inserta el elemento especificado en el \u00edndice especificado en la lista.</li> <li>remove(Object elemento): Elimina la primera ocurrencia del elemento especificado de la lista.</li> <li>removeAt(int indice): Elimina el elemento en el \u00edndice especificado de la lista.</li> <li>clear(): Elimina todos los elementos de la lista.</li> <li>contains(Object elemento): Devuelve true si la lista contiene el elemento especificado.</li> <li>indexOf(Object elemento, [int desde = 0]): Devuelve el \u00edndice de la primera ocurrencia del elemento especificado en la lista, o -1 si no se encuentra.</li> <li>lastIndexOf(Object elemento, [int desde]): Devuelve el \u00edndice de la \u00faltima ocurrencia del elemento especificado en la lista, o -1 si no se encuentra.</li> <li>sublist(int desde, [int hasta]): Devuelve una vista de la lista que contiene los elementos desde el \u00edndice especificado hasta el \u00edndice especificado (no inclusivo).</li> <li>forEach(void f(E elemento)): Ejecuta la funci\u00f3n especificada para cada elemento de la lista.</li> <li>map(R f(E elemento)): Devuelve una nueva lista que contiene los resultados de aplicar la funci\u00f3n especificada a cada elemento de la lista. <li>where(bool f(E elemento)): Devuelve una nueva lista que contiene solo los elementos de la lista para los que la funci\u00f3n especificada devuelve true.</li> <li>reduce(E combine(E valorPrevio, E elemento)): Combina los elementos de la lista utilizando la funci\u00f3n especificada y devuelve el resultado final.</li> <li>sort([int f(E a, E b)]): Ordena los elementos de la lista seg\u00fan el orden especificado por la funci\u00f3n de comparaci\u00f3n opcional.</li> <pre><code>// Ejemplo para el m\u00e9todo add()\nList&lt;int&gt; numeros = [1, 2, 3];\nnumeros.add(4);\nprint(numeros); // salida: [1, 2, 3, 4]\n// Ejemplo para el m\u00e9todo addAll()\nList&lt;int&gt; numeros = [1, 2, 3];\nnumeros.addAll([4, 5, 6]);\nprint(numeros); // salida: [1, 2, 3, 4, 5, 6]\n// Ejemplo para el m\u00e9todo insert()\nList&lt;String&gt; palabras = ['hola', 'mundo'];\npalabras.insert(1, '!');\nprint(palabras); // salida: [hola, !, mundo]\n// Ejemplo para el m\u00e9todo remove()\nList&lt;int&gt; numeros = [1, 2, 3, 4];\nnumeros.remove(3);\nprint(numeros); // salida: [1, 2, 4]\n// Ejemplo para el m\u00e9todo removeAt()\nList&lt;String&gt; palabras = ['hola', 'mundo', '!'];\npalabras.removeAt(2);\nprint(palabras); // salida: [hola, mundo]\n// Ejemplo para el m\u00e9todo clear()\nList&lt;int&gt; numeros = [1, 2, 3];\nnumeros.clear();\nprint(numeros); // salida: []\n// Ejemplo para el m\u00e9todo contains()\nList&lt;String&gt; palabras = ['hola', 'mundo'];\nbool contieneHola = palabras.contains('hola');\nprint(contieneHola); // salida: true\n// Ejemplo para el m\u00e9todo indexOf()\nList&lt;int&gt; numeros = [1, 2, 3, 4];\nint indice = numeros.indexOf(3);\nprint(indice); // salida: 2\n// Ejemplo para el m\u00e9todo lastIndexOf()\nList&lt;int&gt; numeros = [1, 2, 3, 4, 3];\nint ultimoIndice = numeros.lastIndexOf(3);\nprint(ultimoIndice); // salida: 4\n// Ejemplo para el m\u00e9todo sublist()\nList&lt;int&gt; numeros = [1, 2, 3, 4, 5];\nList&lt;int&gt; sublista = numeros.sublist(1, 4);\nprint(sublista); // salida: [2, 3, 4]\n// Ejemplo para el m\u00e9todo forEach()\nList&lt;String&gt; palabras = ['hola', 'mundo'];\npalabras.forEach((palabra) =&gt; print(palabra)); // salida: hola, mundo\n// Ejemplo para el m\u00e9todo map()\nList&lt;int&gt; numeros = [1, 2, 3];\nList&lt;String&gt; numerosComoCadenas = numeros.map((numero) =&gt; numero.toString()).toList();\nprint(numerosComoCadenas); // salida: ['1', '2', '3']\n// Ejemplo para el m\u00e9todo where()\nList&lt;int&gt; numeros = [1, 2, 3, 4, 5];\nList&lt;int&gt; pares = numeros.where((numero) =&gt; numero % 2 == 0).toList();\nprint(pares); // salida: [2, 4]\n// Ejemplo para el m\u00e9todo reduce()\nList&lt;int&gt; numeros = [1, 2, 3, 4];\nint suma = numeros.reduce((valorPrevio, numero) =&gt; valorPrevio + numero);\nprint(suma); // salida: 10\n// Ejemplo para el m\u00e9todo sort()\nList&lt;int&gt; numeros = [3, 1, 4, 2];\nnumeros.sort();\nprint(numeros); // salida: [1, 2,\n</code></pre> <p>Resumiendo</p> <p>Las listas en Dart son una herramienta muy \u00fatil para almacenar y manipular colecciones de objetos en un orden espec\u00edfico.</p>"},{"location":"dart/tipo_maps/","title":"Tipo Maps","text":"<p>En Dart, un <code>Map</code> es una estructura de datos que almacena pares de valores clave-valor. Cada elemento del mapa tiene una clave \u00fanica que se utiliza para acceder al valor asociado.</p> <p>Los <code>Map</code> en Dart son similares a los <code>diccionarios</code> en otros lenguajes de programaci\u00f3n. Los elementos de un Map se pueden acceder y modificar mediante la clave. Las claves pueden ser de cualquier tipo, siempre y cuando el tipo sea compatible con el operador de igualdad <code>==</code>. Los valores tambi\u00e9n pueden ser de cualquier tipo.</p> <p>Para crear un Map en Dart, se puede utilizar la siguiente sintaxis:</p> <pre><code>var mapa = {\n'clave1': valor1,\n'clave2': valor2,\n// ...\n};\n</code></pre> <p>Tambi\u00e9n se puede crear un Map vac\u00edo y luego agregar elementos:</p> <pre><code>var mapa = Map&lt;String, int&gt;();\nmapa['clave1'] = 1;\nmapa['clave2'] = 2;\n</code></pre> <p>Para acceder a un valor en un Map, se utiliza la clave correspondiente:</p> <pre><code>print(mapa['clave1']); // Imprime 1\n</code></pre> <p>Si se intenta acceder a una clave que no existe en el Map, se devuelve <code>null</code>.</p> <p>Tambi\u00e9n se pueden recorrer todos los elementos de un Map utilizando un ciclo <code>for</code>:</p> <pre><code>for (var clave in mapa.keys) {\nprint('$clave: ${mapa[clave]}');\n}\n</code></pre>"},{"location":"dart/tipo_maps/#metodos-utiles","title":"M\u00e9todos \u00datiles","text":"<p>Adem\u00e1s, Dart proporciona muchos m\u00e9todos \u00fatiles para trabajar con Mapas, como:</p> <ul> <li>[]: Accede al valor asociado con la clave especificada.</li> <li>[]=: Asigna un valor a una clave espec\u00edfica.</li> <li>length: Devuelve el n\u00famero de elementos en el Map.</li> <li>keys: Devuelve una lista que contiene todas las claves en el Map.</li> <li>values: Devuelve una lista que contiene todos los valores en el Map.</li> <li>isEmpty: Devuelve true si el Map est\u00e1 vac\u00edo.</li> <li>isNotEmpty: Devuelve true si el Map no est\u00e1 vac\u00edo.</li> <li>containsKey: Devuelve true si el Map contiene la clave especificada.</li> <li>containsValue: Devuelve true si el Map contiene el valor especificado.</li> <li>forEach: Ejecuta una funci\u00f3n para cada clave-valor en el Map.</li> <li>putIfAbsent: Asigna un valor a una clave solo si la clave no existe en el Map.</li> <li>remove: Elimina la entrada correspondiente a una clave del Map.</li> <li>clear: Elimina todas las entradas del Map.</li> <li>update: Actualiza el valor correspondiente a una clave en el Map.</li> <li>updateAll: Actualiza todos los valores del Map utilizando una funci\u00f3n proporcionada.</li> <li>map: Crea un nuevo Map aplicando una funci\u00f3n a cada entrada del Map original.</li> <li>toString: Devuelve una cadena que representa el Map.</li> </ul> <p>Hay muchos m\u00e1s m\u00e9todos disponibles en la clase Map de Dart, pero estos son algunos de los m\u00e1s comunes y \u00fatiles.</p> <p>https://dart.dev/language/collections#maps</p> <pre><code>// Crear un Map vac\u00edo\nMap&lt;String, int&gt; miMapa = {};\n// Agregar elementos al Map\nmiMapa['Manzanas'] = 10;\nmiMapa['Naranjas'] = 5;\nmiMapa['Pl\u00e1tanos'] = 7;\n// Acceder a un valor en particular\nprint(miMapa['Manzanas']); // 10\n// Obtener una lista de todas las claves\nList&lt;String&gt; claves = miMapa.keys.toList();\nprint(claves); // ['Manzanas', 'Naranjas', 'Pl\u00e1tanos']\n// Obtener una lista de todos los valores\nList&lt;int&gt; valores = miMapa.values.toList();\nprint(valores); // [10, 5, 7]\n// Comprobar si el Map est\u00e1 vac\u00edo\nprint(miMapa.isEmpty); // false\n// Comprobar si el Map no est\u00e1 vac\u00edo\nprint(miMapa.isNotEmpty); // true\n// Comprobar si el Map contiene una clave espec\u00edfica\nprint(miMapa.containsKey('Manzanas')); // true\n// Comprobar si el Map contiene un valor espec\u00edfico\nprint(miMapa.containsValue(5)); // true\n// Iterar sobre cada clave-valor en el Map\nmiMapa.forEach((clave, valor) {\nprint('$clave = $valor');\n});\n// Asignar un valor a una clave solo si la clave no existe en el Map\nmiMapa.putIfAbsent('Uvas', () =&gt; 3);\n// Eliminar una entrada del Map\nmiMapa.remove('Naranjas');\n// Eliminar todas las entradas del Map\nmiMapa.clear();\n// Actualizar el valor correspondiente a una clave en el Map\nmiMapa.update('Manzanas', (valor) =&gt; valor + 2);\n// Actualizar todos los valores del Map utilizando una funci\u00f3n proporcionada\nmiMapa.updateAll((clave, valor) =&gt; valor * 2);\n// Crear un nuevo Map aplicando una funci\u00f3n a cada entrada del Map original\nMap&lt;String, int&gt; nuevoMapa = miMapa.map((clave, valor) {\nreturn MapEntry(clave.toUpperCase(), valor + 1);\n});\n// Convertir el Map a una cadena\nprint(miMapa.toString()); // {Manzanas: 12, Pl\u00e1tanos: 14, Uvas: 3}\n</code></pre>"},{"location":"dart/tipo_maps/#practiquemos","title":"Practiquemos","text":"<p>Supongamos que tienes una lista de estudiantes con sus respectivas edades y quieres crear un mapa que muestre el nombre de cada estudiante junto con su edad. Puedes hacer esto utilizando el constructor fromIterables del Map.</p> <pre><code>void main() {\nList&lt;String&gt; estudiantes = ['Juan', 'Mar\u00eda', 'Pedro', 'Ana'];\nList&lt;int&gt; edades = [20, 21, 19, 22];\nMap&lt;String, int&gt; mapaEstudiantes = Map.fromIterables(estudiantes, edades);\nmapaEstudiantes.forEach((nombre, edad) {\nprint('$nombre tiene $edad a\u00f1os.');\n});\n}\n// Imprime\n// Juan tiene 20 a\u00f1os.\n// Mar\u00eda tiene 21 a\u00f1os.\n// Pedro tiene 19 a\u00f1os.\n// Ana tiene 22 a\u00f1os.\n</code></pre> <p>En este ejemplo, estamos utilizando el constructor fromIterables del Map para crear un nuevo mapa a partir de las dos listas: una lista de nombres de estudiantes y una lista de edades. El constructor fromIterables crea un mapa en el que los elementos de la primera lista son las claves y los elementos de la segunda lista son los valores correspondientes. Luego, utilizamos el m\u00e9todo forEach del Map para imprimir los resultados.</p> <p>Abrir en DartPad</p> <p>Resumiendo</p> <p>Los Map en Dart son una estructura de datos muy \u00fatil para almacenar y manipular pares de valores clave-valor. Los elementos de un Map se pueden acceder y modificar mediante la clave correspondiente, y Dart proporciona una gran cantidad de m\u00e9todos \u00fatiles para trabajar con Mapas.</p>"},{"location":"dart/tipos_de_variables/","title":"Tipos de Variables en Dart","text":"<p>En Dart, existen varios tipos de variables que se utilizan para almacenar diferentes tipos de datos. A continuaci\u00f3n, se describen los tipos de variables m\u00e1s comunes en Dart y para qu\u00e9 se utilizan:</p> <ol> <li> <p>int: El tipo int se utiliza para almacenar n\u00fameros enteros. Este tipo de variable se utiliza para representar valores num\u00e9ricos sin decimales, como 1, 2, 3, etc.</p> </li> <li> <p>double: El tipo double se utiliza para almacenar n\u00fameros decimales o de punto flotante. Este tipo de variable se utiliza para representar valores num\u00e9ricos con decimales, como 3.14, 2.5, etc.</p> </li> <li> <p>String: El tipo String se utiliza para almacenar texto. Este tipo de variable se utiliza para representar cadenas de caracteres, como \"Hola\", \"Mundo\", etc.</p> </li> <li> <p>bool: El tipo bool se utiliza para almacenar valores booleanos, que son valores que solo pueden ser verdaderos o falsos. Este tipo de variable se utiliza para representar valores booleanos como true o false.</p> </li> <li> <p>List: El tipo List se utiliza para almacenar una colecci\u00f3n de elementos. Este tipo de variable se utiliza para representar una lista de valores, como una lista de n\u00fameros o una lista de cadenas.</p> </li> <li> <p>Map: El tipo Map se utiliza para almacenar una colecci\u00f3n de pares clave-valor. Este tipo de variable se utiliza para representar una colecci\u00f3n de valores que se pueden acceder utilizando una clave \u00fanica, como un diccionario.</p> </li> <li> <p>dynamic: El tipo dynamic se utiliza para declarar una variable que puede contener cualquier tipo de valor. Este tipo de variable se utiliza cuando no se sabe de antemano el tipo de dato que se va a almacenar en la variable.</p> </li> </ol> <p>Los diferentes tipos de variables en Dart se utilizan para almacenar diferentes tipos de datos, como n\u00fameros enteros, n\u00fameros decimales, texto, valores booleanos, colecciones de elementos, etc. La elecci\u00f3n del tipo de variable adecuado depender\u00e1 del tipo de dato que se va a almacenar en la variable y del uso que se le va a dar a dicha variable en el programa.</p> <pre><code>void main() { // (1)\nfinal String pokemon = 'Ditto'; //(2)\nfinal int hp = 100; // (3)\nfinal bool isAlive = true;\nfinal List&lt;String&gt; abilities = ['impostor'];\nfinal sprites = &lt;String&gt;['ditto/front.png','ditto/back.png'];\n// dynamic == null\ndynamic errorMessage = 'Hola'; // (4)\nerrorMessage = true;\nerrorMessage = [1,2,3,4,5,6];\nerrorMessage = { 1,2,3,4,5,6 };\nerrorMessage = () =&gt; true;\nerrorMessage = null;\nprint(\"\"\"  \n$pokemon\n$hp\n$isAlive\n$abilities\n$sprites\n$errorMessage\n  \"\"\"); // (5)\n}\n</code></pre> <ol> <li> <p>La primera l\u00ednea define la funci\u00f3n principal main() que se ejecutar\u00e1 cuando se inicie el programa.</p> </li> <li> <p>Las siguientes l\u00edneas del c\u00f3digo definen varias variables usando la palabra clave final. La palabra clave final se utiliza para declarar variables que no cambiar\u00e1n de valor una vez que se les haya asignado un valor.</p> </li> <li> <p>La variable pokemon es de tipo String y contiene el valor 'Ditto'. La variable hp es de tipo int y contiene el valor 100. La variable isAlive es de tipo bool y contiene el valor true. La variable abilities es de tipo List y contiene una lista con un \u00fanico elemento: 'impostor'. La variable sprites es de tipo List y contiene una lista con dos elementos: 'ditto/front.png' y 'ditto/back.png'. <li> <p>La secci\u00f3n siguiente del c\u00f3digo utiliza la variable errorMessage de tipo dynamic para demostrar que su tipo puede cambiar din\u00e1micamente. La variable errorMessage se inicializa con el valor 'Hola' y luego se le asignan varios valores diferentes, incluidos un valor booleano, una lista, un conjunto, una funci\u00f3n y el valor null.</p> </li> <li> <p>Finalmente, la \u00faltima l\u00ednea del c\u00f3digo utiliza la funci\u00f3n print() para imprimir todas las variables declaradas anteriormente en la consola en un formato de cadena de varias l\u00edneas utilizando una sintaxis especial que permite insertar variables en la cadena utilizando $ y los corchetes {}.</p> </li> <p>Abrir en DartPad</p> <p>Resumiendo</p> <p>Los diferentes tipos de variables en Dart se utilizan para almacenar diferentes tipos de datos, como n\u00fameros enteros, n\u00fameros decimales, texto, valores booleanos, colecciones de elementos, etc. La elecci\u00f3n del tipo de variable adecuado depender\u00e1 del tipo de dato que se va a almacenar en la variable y del uso que se le va a dar a dicha variable en el programa.</p>"},{"location":"docker/","title":"Gu\u00eda Docker","text":"<p>Bienvenidos a la secci\u00f3n sobre Docker en la \"Gu\u00eda para Desarrolladores de Dart y Flutter\". En esta secci\u00f3n, aprender\u00e1s c\u00f3mo utilizar Docker para crear contenedores de aplicaciones, lo que te permitir\u00e1 desarrollar y desplegar tus aplicaciones de una manera m\u00e1s eficiente y escalable.</p> <p>As\u00ed que prep\u00e1rate para aprender c\u00f3mo utilizar Docker para optimizar tu flujo de trabajo de desarrollo y despliegue de aplicaciones Dart y Flutter. \u00a1Empecemos!</p>"},{"location":"docker/basico/que_es_docker/","title":"Que es Docker?","text":"<p>Docker es una plataforma de software que permite a los desarrolladores construir, empaquetar y distribuir aplicaciones en contenedores. Los contenedores son unidades de software aut\u00f3nomas que incluyen todo lo que una aplicaci\u00f3n necesita para ejecutarse, como c\u00f3digo, bibliotecas, dependencias y configuraciones.</p> <p>Docker es una herramienta muy \u00fatil para la creaci\u00f3n y gesti\u00f3n de entornos de desarrollo y producci\u00f3n, ya que permite la portabilidad de aplicaciones y asegura que funcionen de manera consistente en diferentes sistemas operativos y entornos.</p> <p>Adem\u00e1s, Docker simplifica el proceso de implementaci\u00f3n de aplicaciones en la nube, ya que los contenedores se pueden mover f\u00e1cilmente entre diferentes plataformas de infraestructura en la nube, como Amazon Web Services, Microsoft Azure y Google Cloud Platform.</p> <p>Resumiendo</p> <p>Docker es una tecnolog\u00eda que ayuda a los desarrolladores a crear aplicaciones port\u00e1tiles y f\u00e1ciles de implementar, lo que les permite centrarse en la creaci\u00f3n de software de alta calidad en lugar de preocuparse por la infraestructura subyacente.</p> <p>Web</p> <p>www.docker.com</p>"},{"location":"flutter/que_es_flutter/","title":"Que es Flutter","text":"<p>Flutter es un framework de c\u00f3digo abierto desarrollado por Google para crear aplicaciones m\u00f3viles para iOS y Android, as\u00ed como para la web y escritorio, con una sola base de c\u00f3digo. Flutter utiliza el lenguaje de programaci\u00f3n Dart, tambi\u00e9n desarrollado por Google, y cuenta con una amplia variedad de widgets y herramientas para crear interfaces de usuario atractivas y din\u00e1micas.</p> <p>Una de las principales ventajas de Flutter es su capacidad para crear interfaces de usuario personalizadas y fluidas, con animaciones y transiciones suaves. Adem\u00e1s, Flutter ofrece una amplia gama de herramientas de desarrollo, incluyendo un conjunto completo de widgets, una gran cantidad de paquetes y plugins, y herramientas de depuraci\u00f3n y an\u00e1lisis de rendimiento.</p> <p>Flutter ha ganado popularidad en la comunidad de desarrollo de aplicaciones m\u00f3viles debido a su facilidad de uso y su capacidad para crear aplicaciones de alta calidad en poco tiempo.</p> <p>En el ecosistema de Flutter, existen tres conceptos principales relacionados con la distribuci\u00f3n y gesti\u00f3n de paquetes y plugins:</p> <p>Paquetes (Packages): son librer\u00edas de c\u00f3digo fuente que se pueden utilizar en una aplicaci\u00f3n de Flutter para agregar funcionalidades espec\u00edficas. Los paquetes son gestionados por el sistema de gesti\u00f3n de paquetes de Dart, que se llama Pub. Los paquetes se pueden descargar e instalar f\u00e1cilmente en una aplicaci\u00f3n de Flutter mediante el uso de Pub.</p> <p>Plugins: son paquetes que ofrecen una funcionalidad espec\u00edfica para plataformas nativas, como Android o iOS. Por ejemplo, un plugin puede permitir acceder a la c\u00e1mara del dispositivo o utilizar servicios de notificaciones push. Los plugins se pueden utilizar en una aplicaci\u00f3n de Flutter para proporcionar funcionalidades espec\u00edficas de la plataforma. Los plugins tambi\u00e9n se gestionan y se descargan a trav\u00e9s de Pub.</p> <p>Pub.dev: es el repositorio de paquetes y plugins para la comunidad de Flutter. Es un lugar donde los desarrolladores pueden publicar sus paquetes y plugins y compartirlos con la comunidad de Flutter. Pub.dev ofrece una amplia gama de paquetes y plugins para utilizar en aplicaciones de Flutter, y se pueden buscar y descargar f\u00e1cilmente desde la l\u00ednea de comandos o desde el sitio web de Pub.dev.</p> <p>Resumiendo</p> <p>En resumen, los paquetes y plugins son componentes esenciales del ecosistema de Flutter, y Pub.dev es el lugar donde se pueden encontrar y descargar estos componentes para utilizar en una aplicaci\u00f3n de Flutter.</p> <p>Info</p> <p>https://flutter.dev https://pub.dev </p>"},{"location":"flutter/primeros_pasos/","title":"Contenido Primeros Pasos","text":"<p>En esta secci\u00f3n veremos sobre:  </p> <ul> <li>Estructura de Directorios y Archivos</li> <li>Hola Mundo</li> <li>const</li> <li>Stateful y Stateless Widgets</li> <li>Scaffold</li> <li>FloatingActionButtons</li> <li>Column</li> <li>Widgets personalizados</li> <li>Constantes</li> <li>MaterialApp</li> <li>Introducci\u00f3n a Material Design 3</li> <li>Color Schemes</li> <li>AppBars</li> </ul>"},{"location":"flutter/primeros_pasos/directorios_y_archivos/","title":"Estructura de Directorios y Archivos","text":"<p>La estructura de directorios t\u00edpica de un proyecto de Flutter incluye los siguientes archivos y directorios:</p> <p><code>.dart_tool</code>: Este directorio es creado por el sistema de gesti\u00f3n de paquetes de Dart, Pub, y contiene informaci\u00f3n y cach\u00e9 de los paquetes que se utilizan en el proyecto.</p> <p><code>.idea</code>: Este directorio es creado por el IDE de JetBrains, IntelliJ IDEA, y contiene configuraciones espec\u00edficas del IDE para el proyecto. Este directorio puede no estar presente si se est\u00e1 utilizando otro IDE.</p> <p><code>.metadata</code>: Este archivo es creado por el sistema de construcci\u00f3n de Flutter, Flutter Tools, y contiene informaci\u00f3n sobre el proyecto.</p> <p><code>android</code>: Este directorio contiene el c\u00f3digo fuente de la aplicaci\u00f3n para Android, incluyendo la configuraci\u00f3n del proyecto y los recursos de la aplicaci\u00f3n.</p> <p><code>ios</code>: Este directorio contiene el c\u00f3digo fuente de la aplicaci\u00f3n para iOS, incluyendo la configuraci\u00f3n del proyecto y los recursos de la aplicaci\u00f3n.</p> <p><code>lib</code>: Este directorio contiene el c\u00f3digo fuente de la aplicaci\u00f3n escrita en Dart, incluyendo las pantallas, widgets y l\u00f3gica de la aplicaci\u00f3n.</p> <p><code>linux</code>: Este directorio contiene el c\u00f3digo fuente de la aplicaci\u00f3n para Linux, incluyendo la configuraci\u00f3n del proyecto y los recursos de la aplicaci\u00f3n.</p> <p><code>macos</code>: Este directorio contiene el c\u00f3digo fuente de la aplicaci\u00f3n para macOS, incluyendo la configuraci\u00f3n del proyecto y los recursos de la aplicaci\u00f3n.</p> <p><code>web</code>: Este directorio contiene el c\u00f3digo fuente de la aplicaci\u00f3n para la web, incluyendo la configuraci\u00f3n del proyecto y los recursos de la aplicaci\u00f3n.</p> <p><code>windows</code>: Este directorio contiene el c\u00f3digo fuente de la aplicaci\u00f3n para Windows, incluyendo la configuraci\u00f3n del proyecto y los recursos de la aplicaci\u00f3n.</p> <p><code>.gitignore</code>: Este archivo indica a Git qu\u00e9 archivos o directorios deben ignorarse al realizar un seguimiento de los cambios en el proyecto.</p> <p><code>analysis_options.yaml</code>: Este archivo contiene las opciones de an\u00e1lisis est\u00e1tico para el proyecto.</p> <p><code>hola_mundo.iml</code>: Este archivo es creado por IntelliJ IDEA y contiene informaci\u00f3n de configuraci\u00f3n espec\u00edfica del proyecto.</p> <p><code>pubspec.lock</code>: Este archivo es creado por el sistema de gesti\u00f3n de paquetes de Dart, Pub, y contiene informaci\u00f3n sobre las versiones exactas de los paquetes que se utilizan en el proyecto.</p> <p><code>pubspec.yaml</code>: Este archivo es el archivo de configuraci\u00f3n del proyecto en Flutter, y contiene informaci\u00f3n sobre los paquetes que se utilizan en el proyecto y otra informaci\u00f3n de configuraci\u00f3n.</p> <p><code>README.md</code>: Este archivo es una descripci\u00f3n del proyecto que se muestra en la p\u00e1gina principal del repositorio de c\u00f3digo fuente en GitHub.</p> <p>Resumiendo</p> <p>En resumen, los directorios y archivos mencionados son comunes en un proyecto t\u00edpico de Flutter, y se utilizan para organizar el c\u00f3digo fuente, recursos y configuraciones de la aplicaci\u00f3n.</p>"},{"location":"flutter/primeros_pasos/hola_mundo/","title":"Hola mundo","text":"<p>Este c\u00f3digo de Flutter es una aplicaci\u00f3n b\u00e1sica que simplemente muestra una pantalla con un texto \"Hola Mundo\". A continuaci\u00f3n, se explican las partes del c\u00f3digo:</p> <pre><code>import 'package:flutter/material.dart'; // (1)\nvoid main() {\nrunApp(const MainApp(123)); // (2)\n}\nclass MainApp extends StatelessWidget { // (3)\nconst MainApp({super.key}); // (4)\nfinal int nombre = 2+3;\n@override // (5)\nWidget build(BuildContext context) { // (6)\nreturn const MaterialApp( // (7)\nhome: Scaffold( // (8)\nbody: Center( // (9)\nchild: Text('Hello World!'), // (10)\n),\n),\n);\n}\n}\n</code></pre> <ol> <li> <p>La primera l\u00ednea importa el paquete flutter/material.dart, que proporciona una variedad de widgets y herramientas para construir interfaces de usuario de material design en Flutter.</p> </li> <li> <p>La funci\u00f3n main llama a la funci\u00f3n runApp para iniciar la aplicaci\u00f3n Flutter. runApp toma como argumento el widget ra\u00edz de la aplicaci\u00f3n, en este caso, la clase MainApp.</p> </li> <li> <p>La clase MainApp es una subclase de StatelessWidget. Un widget sin estado es aquel que no tiene mutable state, es decir, que una vez que se construye, no cambia. En este caso, MainApp es el widget ra\u00edz de la aplicaci\u00f3n.</p> </li> <li> <p>Este constructor define un par\u00e1metro opcional key y llama al constructor de la clase base (super) sin pasar ning\u00fan argumento. El modificador const indica que tanto este constructor como cualquier instancia de la clase MainApp se construir\u00e1n de forma inmutable.</p> </li> <li> <p>Este es el anotador override, que indica que el m\u00e9todo que sigue a continuaci\u00f3n (en este caso, build) reemplaza el m\u00e9todo correspondiente de la clase base (StatelessWidget).</p> </li> <li> <p>El m\u00e9todo build de MainApp devuelve un widget que define la interfaz de usuario de la aplicaci\u00f3n.</p> </li> <li> <p>Este widget MaterialApp es un widget de nivel superior que proporciona varios servicios, como la navegaci\u00f3n y el manejo de temas.</p> </li> <li> <p>El widget Scaffold proporciona una estructura b\u00e1sica de pantalla para la aplicaci\u00f3n. En este caso, solo se define el cuerpo de la pantalla.</p> </li> <li> <p>El widget Center se utiliza para centrar su widget hijo, que es un widget Text.</p> </li> <li> <p>El widget Text muestra el mensaje \"Hola Mundo\" en el centro de la pantalla.</p> </li> </ol> <p>Abrir en DartPad</p>"},{"location":"flutter/primeros_pasos/hola_mundo/#explicacion","title":"Explicaci\u00f3n","text":"<ol> <li> <p>La primera l\u00ednea importa el paquete flutter/material.dart, que proporciona una variedad de widgets y herramientas para construir interfaces de usuario de material design en Flutter.</p> </li> <li> <p>La funci\u00f3n main llama a la funci\u00f3n runApp para iniciar la aplicaci\u00f3n Flutter. runApp toma como argumento el widget ra\u00edz de la aplicaci\u00f3n, en este caso, la clase MainApp.</p> </li> <li> <p>La clase MainApp es una subclase de StatelessWidget. Un widget sin estado es aquel que no tiene mutable state, es decir, que una vez que se construye, no cambia. En este caso, MainApp es el widget ra\u00edz de la aplicaci\u00f3n.</p> </li> <li> <p>Este constructor define un par\u00e1metro opcional key y llama al constructor de la clase base (super) sin pasar ning\u00fan argumento. El modificador const indica que tanto este constructor como cualquier instancia de la clase MainApp se construir\u00e1n de forma inmutable.</p> </li> <li> <p>Este es el anotador override, que indica que el m\u00e9todo que sigue a continuaci\u00f3n (en este caso, build) reemplaza el m\u00e9todo correspondiente de la clase base (StatelessWidget).</p> </li> <li> <p>El m\u00e9todo build de MainApp devuelve un widget que define la interfaz de usuario de la aplicaci\u00f3n.</p> </li> <li> <p>Este widget MaterialApp es un widget de nivel superior que proporciona varios servicios, como la navegaci\u00f3n y el manejo de temas.</p> </li> <li> <p>El widget Scaffold proporciona una estructura b\u00e1sica de pantalla para la aplicaci\u00f3n. En este caso, solo se define el cuerpo de la pantalla.</p> </li> <li> <p>El widget Center se utiliza para centrar su widget hijo, que es un widget Text.</p> </li> <li> <p>El widget Text muestra el mensaje \"Hola Mundo\" en el centro de la pantalla.</p> </li> </ol>"},{"location":"flutter/primeros_pasos/hola_mundo/#debug-banner","title":"Debug Banner","text":"<p>Para Remover el cartel de Debug agregar <code>debugShowCheckedModeBanner: false</code> dentro del Widget de <code>MaterialApp()</code></p> <pre><code>MaterialApp( debugShowCheckedModeBanner: false,\n...\n);\n</code></pre> <p>Resumiendo</p> <p>En resumen, este c\u00f3digo define una aplicaci\u00f3n de Flutter simple que muestra un mensaje de \"Hola Mundo\" en el centro de la pantalla utilizando widgets predefinidos de Flutter.</p>"},{"location":"inicio/","title":"Gu\u00eda de Desarrollo Dart &amp; Flutter","text":"<p>\u00a1Que tenemos Ramirez\u00a1, \u00a1Que tenemos!</p> <p>Notas al margen Larrauri, dec\u00eda mi profe de matem\u00e1ticas</p> <p>Mi nombre es Sebastian Larrauri y he sido desarrollador de software por mas de 15 a\u00f1os y desde que conoc\u00ed Flutter quede anonadado por el mismo y es por ese motivo que decid\u00ed junto a Jose Luis Reartes un amigo y gran desarrollador Flutter con mas de 4 a\u00f1os de experiencia, empezar este proyecto en el cual intentaremos volcar todo nuestro conocimiento en desarrollo de software para tener de referencia, esperamos que esta gu\u00eda les sea de utilidad a Ud. como lo es para nosotros en nuestro dia a dia.  </p> <p>Bienvenidos a la Gu\u00eda de Desarrollo Dart y Flutter, una completa fuente de referencia e informaci\u00f3n para aquellos interesados en el desarrollo de aplicaciones multiplataforma con <code>Dart</code> y <code>Flutter</code>.</p> <p>La motivaci\u00f3n detr\u00e1s de esta gu\u00eda es proporcionar un recurso integral para aquellos que buscan programar en <code>Dart</code> y a utilizar el framework <code>Flutter</code> para el desarrollo de aplicaciones multiplataforma. Con el r\u00e1pido crecimiento de <code>Flutter</code>, es importante estar al d\u00eda con las \u00faltimas tecnolog\u00edas y t\u00e9cnicas de desarrollo.</p> <p>AVISO</p> <p>Esta gu\u00eda no pretende ense\u00f1ar a programar con <code>Dart</code> o <code>Flutter</code> sino mas bien ser un recurso de consulta y referencia a la hora de encarar desarrollos con estas tecnolog\u00edas.</p> <p>En esta gu\u00eda, cubriremos una amplia variedad de temas, comenzando con una introducci\u00f3n a <code>Dart</code> y <code>Flutter</code>, como tambi\u00e9n la utilizaci\u00f3n de Docker, Patrones de Dise\u00f1o que se utilizan en el desarrollo de aplicaciones. Tambi\u00e9n hablaremos sobre Git y Github, y c\u00f3mo utilizar el flujo de trabajo Git para colaborar en proyectos de manera efectiva.</p> <p>Adem\u00e1s, exploraremos metodolog\u00edas de desarrollo \u00e1gil como Scrum, herramientas \u00fatiles para el desarrollo de aplicaciones y la importancia de los Packages y Plugins en el ecosistema de <code>Dart</code> y <code>Flutter</code>. Tambi\u00e9n hablaremos sobre la Arquitectura de aplicaciones y c\u00f3mo utilizar principios como SOLID y Clean Code para desarrollar aplicaciones de alta calidad y mantenibles. Finalmente, hablaremos sobre el enfoque de Domain Driven Design para desarrollar aplicaciones robustas y escalables.</p> <p>Esta gu\u00eda es adecuada tanto para principiantes como para desarrolladores experimentados. Si eres nuevo en el desarrollo de aplicaciones m\u00f3viles y web o si est\u00e1s buscando expandir tus habilidades en <code>Dart</code> y <code>Flutter</code>, esta gu\u00eda es para ti.</p> <p>\u00a1Esperamos que esta gu\u00eda te proporcione el conocimiento y las habilidades necesarias para crear aplicaciones incre\u00edbles con <code>Dart</code> y <code>Flutter</code>!</p> <p>Saludos y \u00a1A Darle \u00c1tomos!</p>"}]}